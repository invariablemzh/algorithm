基础算法

1.排序：快排、归并

2.二分：整数、浮点数

3.前缀和 + 差分

4.双指针算法

5.位运算

6.离散化

7.区间合并



1.1 快排(基于分治)
1.确定分界点 q[l],q[(l+r)/2],q[r]随机,但是如果取中间点的话，效果更好
2.调整区间，分成两个区间，左边小于等于x，右边大于等于x
  2.1 a[],b[]
  2.2 q[l~r],q[i]<=x x->a[]
  			,q[i]>x  x->b[]
  2.3 a[]->q[],b[]->q[]
3.递归处理左右两段

模版：
void quick_sort(int q[],int l,int r){
	if(l>=r) return;
	int x = q[l+r>>1], i = l - 1, j = r + 1;
	while(i<j){
		do i++;while(q[i]<x);
		do j--;while(q[j]>x);
		if(i<j) swap(q[i],q[j]);
	}
	quick_sort(q,l,j);
	quick_sort(q,j+1,r);
}


1.2 归并排序(基于分治)
1.确定分界点:mid=(l+r)/2
2.递归排序left,right,中间为分界点
3.归并->合二为一

模版：
void merge_sort(int q[], int l, int r){
    if (l >= r) return;
    int mid = l + r >> 1;
    merge_sort(q, l, mid);
    merge_sort(q, mid + 1, r);
    int k = 0, i = l, j = mid + 1;
    while (i <= mid && j <= r){
    	if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];
        else tmp[k ++ ] = q[j ++ ];
    }   
    while (i <= mid) tmp[k ++ ] = q[i ++ ];
    while (j <= r) tmp[k ++ ] = q[j ++ ];
    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];
}


2.1整数二分(区间一分为二 右边满足一个性质，左边不满足,包括但不止单调性)
1.  mid = (l+r+1)/2;
	if(check(mid)),true  :[mid,r] 	l = mid
				  ,false :[l,mid-1] r = mid-1

2.	mid = (l+r)/2
	if(check(mid)),true  :[l,mid] 	l = mid
				  ,false :[mid+1,r] r = mid-1

整数二分模版：
bool check(int x) {/* ... */} // 检查x是否满足某种性质
// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r){
    while (l < r)
    {
        int mid = l + r >> 1;
        if (check(mid)) r = mid;    // check()判断mid是否满足性质
        else l = mid + 1;
    }
    return l;
}
// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r){
    while (l < r)
    {
        int mid = l + r + 1 >> 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}

浮点数二分模板
bool check(double x) {/* ... */} // 检查x是否满足某种性质

double bsearch_3(double l, double r)
{
    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求
    while (r - l > eps)
    {
        double mid = (l + r) / 2;
        if (check(mid)) r = mid;
        else l = mid;
    }
    return l;
}

786.求第k个数
快速排序：
	1. 找到分级点x，q[L],q[(L+R)/2],q[R]
	2. 左边所有数Left<=x,右边所有数Right>=x
	3. 递归排序Left，递归排序Right

1. k<=SL,递归Left
2. k> SL,递归Right， k-SL


788.逆序对的数量
归并排序:
    1. [L,R] => [L,mid],[mid+1,R]
    2. 递归排序[L,mid]和[mid+1,R]
    3. 归并，将左右两个有序序列合并成一个有序序列

1. 左半边内部的逆序对的数量,merge_sort(L,mid)
2. 右半边内部的逆序对的数量,merge_sort(mid+1,R)
3. sj = mid - i + 1

可能存在爆int的可能性，要用long long

790.数的三次方根
浮点数保留位数比要求的小数再多两位


3.1 一维前缀和 —— 模板题 AcWing 795. 前缀和
S[i] = a[1] + a[2] + ... a[i]
a[l] + ... + a[r] = S[r] - S[l - 1]

3.2 二维前缀和 —— 模板题 AcWing 796. 子矩阵的和
S[i, j] = 第i行j列格子左上部分所有元素的和
以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：
S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]

3.3 一维差分 —— 模板题 AcWing 797. 差分
给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c

3.4 二维差分 —— 模板题 AcWing 798. 差分矩阵
给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：
S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c


4.0 双指针算法
1. 暴力写出
2. 如果有单调性，尝试用双指针算法

for(i = 0, j = 0;i<n;i++){
    while(j<i&&check(i,j)) j++;
    //每道题具体逻辑 
}

核心思想：
for(int i = 0;i<n;i++)
    for(int j = 0;j<n;j++)
        O(n^2)
将上面的朴素算法优化到O(n)

常见问题分类：
    (1) 对于一个序列，用两个指针维护一段区间
    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作


799. 最长连续不重复子序列
//朴素做法 O(n^2)
for(int i = 0;i<n;i++){
    for(int j = 0;j<i;j++){
        if(check(j,i)){
            res = max(res,i - j + 1)
        }
    }
}

//双指针算法 O(n)
j:j往左最远能到什么地方
for(i = 0, j = 0;i<n;i++){
    while(j<=i&&check(i,j)) j++;
    //每道题具体逻辑 
    res = max(res,i - j + 1);
}

5.0 位运算
位运算 —— 模板题 AcWing 801. 二进制中1的个数
求n的第k位数字: n >> k & 1
返回n的最后一位1：lowbit(n) = n & -n

n在二进制表示中第k位是几
n = 15 = (1111) 2进制表示

1. 先把第k位易到最后一位 n>>k
2. 看个位是几 x&1
=> n>>k&1   //n在二进制表示中第k位是几

lowbit(x) 返回x的最后一位1
若x = 10100,lowbit(x) = 100;
-x = ~x + 1
lowbit(x) = x & -x
          = x & (~x + 1)

 x      = 1010……1000000
~x      = 0101……0111111
~x+1    = 0101……1000000
x&(-x+1)= 0000……1000000


6.0 离散化 —— 模板题 AcWing 802. 区间和
vector<int> alls; // 存储所有待离散化的值
sort(alls.begin(), alls.end()); // 将所有值排序
alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素     

// 二分求出x对应的离散化的值
int find(int x) // 找到第一个大于等于x的位置
{
    int l = 0, r = alls.size() - 1;
    while (l < r)
    {
        int mid = l + r >> 1;
        if (alls[mid] >= x) r = mid;
        else l = mid + 1;
    }
    return r + 1; // 映射到1, 2, ...n
}

int find(int x){
    return lower_bound(alls.begin().alls.end(),x) - alls.begin() + 1;
}

7.0 区间合并 —— 模板题 AcWing 803. 区间合并
1. 按区间左端点排序

// 将所有存在交集的区间合并
void merge(vector<PII> &segs)
{
    vector<PII> res;

    sort(segs.begin(), segs.end());

    int st = -2e9, ed = -2e9;
    for (auto seg : segs)
        if (ed < seg.first)
        {
            if (st != -2e9) res.push_back({st, ed});
            st = seg.first, ed = seg.second;
        }
        else ed = max(ed, seg.second);

    if (st != -2e9) res.push_back({st, ed});

    segs = res;
}










